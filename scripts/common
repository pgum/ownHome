# vim: syntax=sh
## Common script methods
scriptPath=${ohREPOPATH}/scripts

listBundledConfigs(){
  configsList=""
  shopt -s extglob
  filesInConfigDir=$(echo "${ohREPOPATH}/config/!(*.d)")
  for configFile in ${filesInConfigDir}
    do
    configsList="${configsList} $(basename ${configFile})"
    done
  echo ${configsList}
export ohBundledConfigs=${configsList}
}
generateConfigsLinks(){
  for configToLink in $(listBundledConfigs)
    do
    linkMainConfigToHome $configToLink
#    generateConfigLink $configToLink
  done
}

updateRepo(){
  echo update repo
}

backupPreviousConfig(){
#for every config and directory we have
local configFilesToBackup=
for config in ${ohREPOPATH}/config/*
  do
#check if in user ~/ exist file named the same but with dot "." in front - if this happens, then save its name
  local weLookFor="${HOME}/.${config#$ohREPOPATH/config/}" #we look for files in ~/ named as those in config/
  [ -f $weLookFor ] || [ -d $weLookFor ] && configFilesToBackup="$configFilesToBackup $weLookFor"
  done
#copy files to new folder named after current date and time
local backupDirName="${ohREPOPATH}/backups/backup.$(date +%d%m%y.%H%M)"
mkdir ${backupDirName} && cp -L -r -t ${backupDirName} ${configFilesToBackup}
}

isConfigPathFromRepo(){
  isNotSubstring "${ohREPOPATH}" "${1}"
}

isNotSubstring(){
local needle=$2
local haystack=$1
#haystack - needle is equal haystack if substring wasnt cut out
[ "${haystack/needle}" == "$haystack" ]
}

linkMainConfigToHome(){
  local mainConfig=$1
  local homeConfigPath=$(readlink ~/.$mainConfig)
    ln -s $ohREPOPATH/config/$mainConfig ~/.$mainConfig
}
linkAddonConfigFoler(){
  [ ! -d "$ohREPOPATH/config/$addonConfigFolder" ] && return
  mkdir -p ~/.$addonConfigFolder
  shopt -s globstar
  shopt -s extglob
  for addonConfig in $ohREPOPATH/config/$addonConfigFolder/[0-9]*
    do
    [ -f ~/.$addonConfigFolder/$(basename $addonConfig) ] && continue
    ln -s $addonConfig ~/.$addonConfigFolder/
  done
}
wipePreviousConfig(){
for config in ${ohREPOPATH}/config/*
  do
#check if in user ~/ exist file named the same but with dot "." in front - if this happens, then save its name
  local weLookFor="${HOME}/.${config#$ohREPOPATH/config/}" #we look for files in ~/ named as those in config/
  rm -rf $weLookFor 2>/dev/null
  done
}

generateConfigLink(){
  local mainConfig=$1
  local homeConfigPath=$(readlink ~/.$mainConfig)
  linkMainConfigToHome $mainConfig

  local addonConfigFolder=$1.d
  linkAddonConfigFoler $addonConfigFolder
}

