" vim:syntax=vim
""""""""""""""""""""""""""""""""""""""""""""""""""
fun! TurnColorColumnOn()
   hi ColorColumn ctermfg=white ctermbg=darkred 
endfun
fun! TurnColorColumnOff()
   hi ColorColumn NONE 
endfun

let s:hlLenghtyLines = 1
fun! ToggleColorColumn()
   if s:hlLenghtyLines
      let s:hlLenghtyLines = 0
      call TurnColorColumnOn()
   else
      let s:hlLenghtyLines = 1
      call TurnColorColumnOff()
   endif
endfun
""""""""""""""""""""""""""""""""""""""""""""""""""
fun! TurnNumbersOn()
   set number
   highlight LineNr ctermfg=yellow
endfun
fun! TurnRelNumbersOn()
   set relativenumber
   highlight LineNr ctermfg=green
endfun
fun! TurnNumbersOff()
   set nonumber
   set norelativenumber
endfun

let s:numtgl = 0
fun! NumberToggle()
   if s:numtgl == 2
      let s:numtgl = 0
      call TurnNumbersOn()
   elseif s:numtgl == 0
      let s:numtgl = 1
      call TurnRelNumbersOn()
   elseif s:numtgl == 1
      let s:numtgl = 2
      call TurnNumbersOff()
   endif
endfun
""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:ExecuteInShell(command, bang)
	let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))

	if (_ != '')
		let s:_ = _
		let bufnr = bufnr('%')
		let winnr = bufwinnr('^' . _ . '$')
		silent! execute  winnr < 0 ? 'belowright new ' . fnameescape(_) : winnr . 'wincmd w'
		setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile wrap number
		silent! :%d
		let message = 'Execute ' . _ . '...'
		call append(0, message)
		echo message
		silent! 2d | resize 1 | redraw
		silent! execute 'silent! %!'. _
		silent! execute 'resize ' . line('$')
		silent! execute 'syntax on'
		silent! execute 'autocmd BufUnload <buffer> execute bufwinnr(' . bufnr . ') . ''wincmd w'''
		silent! execute 'autocmd BufEnter <buffer> execute ''resize '' .  line(''$'')'
		silent! execute 'nnoremap <silent> <buffer> <CR> :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
		silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
		silent! execute 'nno,emap <silent> <buffer> <LocalLeader>g :execute bufwinnr(' . bufnr . ') . ''wincmd w''<CR>'
		nnoremap <silent> <buffer> <C-W>_ :execute 'resize ' . line('$')<CR>
		silent! syntax on
	endif
endfunction
command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
cabbrev shell Shell
""""""""""""""""""""""""""""""""""""""""""""""""""
function! SearchForLocalVimrc()
  let localVimrcFilename=".vimrc.local"
  let PathPrefix=expand("./")
  if filereadable(PathPrefix.localVimrcFilename)
    execute ":so " .PathPrefix.localVimrcFilename
  endif
endfunction
""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenFileFromString(PathToFile)
  echo a:PathToFile
  execute ":e ". a:PathToFile
endfunction




